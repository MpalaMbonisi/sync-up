name: Java CI/CD to AWS Lightsail Instance

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-scan-deploy:
    name: Build, Test, Scan, & Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Make Maven Wrapper Executable
        run: chmod +x mvnw

      - name: Build, Test, and Package with Maven
        run: ./mvnw -B clean package

      - name: Build Docker Image
        run: |
          docker build -t syncup:${{ github.sha }} .

      - name: Generate Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: true

      - name: Scan for Vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: syncup:${{ github.sha }}
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'

      - name: Save Docker Image
        run: |
          docker save syncup:${{ github.sha }} | gzip > syncup-${{ github.sha }}.tar.gz

      - name: Deploy to Lightsail Instance
        if: github.ref == 'refs/heads/main'
        env:
          PRIVATE_KEY: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          HOSTNAME: ${{ secrets.LIGHTSAIL_IP }}
          USER_NAME: ubuntu
        run: |
          # Setup SSH
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key

          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          # Navigate to app directory
          cd /opt/syncup

          # Stop existing containers
          if [ -f docker-compose.yml ]; then
            docker-compose down || true
          fi

          # Load new image
          docker load < syncup-$1.tar.gz

          # Tag the image
          docker tag syncup:$1 syncup:latest

          # Start services
          docker-compose up -d

          # Cleanup old images (keep last 3)
          docker image prune -f
          docker images | grep syncup | tail -n +4 | awk '{print $3}' | xargs -r docker rmi || true

          # Remove uploaded tar file
          rm -f syncup-$1.tar.gz

          echo "Deployment completed successfully!"
          EOF

          # Copy files to server
          scp -i private_key -o StrictHostKeyChecking=no .env $USER_NAME@$HOSTNAME:/opt/syncup/
          scp -i private_key -o StrictHostKeyChecking=no syncup-${{ github.sha }}.tar.gz $USER_NAME@$HOSTNAME:/opt/syncup/
          scp -i private_key -o StrictHostKeyChecking=no docker-compose.yml $USER_NAME@$HOSTNAME:/opt/syncup/
          scp -i private_key -o StrictHostKeyChecking=no deploy.sh $USER_NAME@$HOSTNAME:/opt/syncup/

          # Execute deployment
          ssh -i private_key -o StrictHostKeyChecking=no $USER_NAME@$HOSTNAME "chmod +x /opt/syncup/deploy.sh && /opt/syncup/deploy.sh ${{ github.sha }}"
